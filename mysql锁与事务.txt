
1、读锁--共享锁（常用于数据迁移）
lock table tablename read;
当前session和其他session都可以读
当前session插入或更新锁定的表会报错，其他session插入或更新锁定的表则会等待。

2、写锁--排他锁
lock table tablename write;
阻塞其他session的写和读

3、释放所有的锁
unlock tables;

4、行锁支持事务
begin;
dml sql     --都会放在同一事务;
commit;


并发事务处理带来的问题（数据库读一致性）
更新丢失（lost update）
多事务，最后提交的事务覆盖之前事务的操作

脏读（dirty reads）
事务A读取了事务B修改了但未提交的数据

不可重读（non-repeatable read）
事务A读取了事务B已经提交的修改数据

幻读（phantom reads）
事务A读取到了事务B已提交的新增数据。


事务隔离级别
1、
读未提交read-uncommitted
读已提交read-committed(解决脏读问题)
可重复读repeatable-read（解决不可重复读、脏读）
可串行化serializable(解决幻读)--效率贼慢，无并发操作

2、优化策略
MySQL默认事务隔离级别可重复读，可重复读的隔离级别下使用了MVCC机制：
  select操作不会更新版本，是快照读（历史版本）
  insert、update、delete会更新版本，是当前读（当前版本）
  间隙锁避免幻读，update where 范围 ，通过范围加锁，即使范围内数据不存在。

3、命令操作
查询事务隔离级别命令
show variables like 'tx_isolation';
设置事务隔离级别
set tx_isolation = 'READ-UNCOMMITTED'

4、死锁
事务1
begin;
select * from table where id =1 for update;
select * from table where id =2 for update;
获取id=2的锁

事务2
begin;
select * from table where id =2 for update;--在事务1获取id=2的锁之前执行
select * from table where id =1 for update;
获取id=1的锁





